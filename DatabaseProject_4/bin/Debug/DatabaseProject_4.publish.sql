/*
Deployment script for targetdatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "targetdatabase"
:setvar DefaultFilePrefix "targetdatabase"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [RSExecRole]...';


GO
CREATE ROLE [RSExecRole]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'RSExecRole';


GO
PRINT N'Creating [RSExecRole]...';


GO
CREATE SCHEMA [RSExecRole]
    AUTHORIZATION [RSExecRole];


GO
PRINT N'Creating [NT AUTHORITY\NETWORK SERVICE]...';


GO
CREATE USER [NT AUTHORITY\NETWORK SERVICE] FOR LOGIN [NT AUTHORITY\NETWORK SERVICE]
    WITH DEFAULT_SCHEMA = [NT AUTHORITY\NETWORK SERVICE];


GO
REVOKE CONNECT TO [NT AUTHORITY\NETWORK SERVICE];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'RSExecRole', @membername = N'NT AUTHORITY\NETWORK SERVICE';


GO
PRINT N'Creating [NT AUTHORITY\NETWORK SERVICE]...';


GO
CREATE SCHEMA [NT AUTHORITY\NETWORK SERVICE]
    AUTHORIZATION [NT AUTHORITY\NETWORK SERVICE];


GO
PRINT N'Creating [dbo].[ChunkData]...';


GO
CREATE TABLE [dbo].[ChunkData] (
    [ChunkID]        UNIQUEIDENTIFIER NOT NULL,
    [SnapshotDataID] UNIQUEIDENTIFIER NOT NULL,
    [ChunkFlags]     TINYINT          NULL,
    [ChunkName]      NVARCHAR (260)   NULL,
    [ChunkType]      INT              NULL,
    [Version]        SMALLINT         NULL,
    [MimeType]       NVARCHAR (260)   NULL,
    [Content]        IMAGE            NULL,
    CONSTRAINT [PK_ChunkData] PRIMARY KEY NONCLUSTERED ([ChunkID] ASC)
);


GO
PRINT N'Creating [dbo].[ChunkData].[IX_ChunkData]...';


GO
CREATE UNIQUE CLUSTERED INDEX [IX_ChunkData]
    ON [dbo].[ChunkData]([SnapshotDataID] ASC, [ChunkType] ASC, [ChunkName] ASC);


GO
PRINT N'Creating [dbo].[ChunkSegmentMapping]...';


GO
CREATE TABLE [dbo].[ChunkSegmentMapping] (
    [ChunkId]          UNIQUEIDENTIFIER NOT NULL,
    [SegmentId]        UNIQUEIDENTIFIER NOT NULL,
    [StartByte]        BIGINT           NOT NULL,
    [LogicalByteCount] INT              NOT NULL,
    [ActualByteCount]  INT              NOT NULL,
    CONSTRAINT [PK_ChunkSegmentMapping] PRIMARY KEY CLUSTERED ([ChunkId] ASC, [SegmentId] ASC)
);


GO
PRINT N'Creating [dbo].[ChunkSegmentMapping].[UNIQ_ChunkId_StartByte]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UNIQ_ChunkId_StartByte]
    ON [dbo].[ChunkSegmentMapping]([ChunkId] ASC, [StartByte] ASC)
    INCLUDE([ActualByteCount], [LogicalByteCount]);


GO
PRINT N'Creating [dbo].[ChunkSegmentMapping].[IX_ChunkSegmentMapping_SegmentId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ChunkSegmentMapping_SegmentId]
    ON [dbo].[ChunkSegmentMapping]([SegmentId] ASC);


GO
PRINT N'Creating [dbo].[ExecutionCache]...';


GO
CREATE TABLE [dbo].[ExecutionCache] (
    [ExecutionCacheID]   UNIQUEIDENTIFIER NOT NULL,
    [ReportID]           UNIQUEIDENTIFIER NOT NULL,
    [ExpirationFlags]    INT              NOT NULL,
    [AbsoluteExpiration] DATETIME         NULL,
    [RelativeExpiration] INT              NULL,
    [SnapshotDataID]     UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_ExecutionCache] PRIMARY KEY NONCLUSTERED ([ExecutionCacheID] ASC)
);


GO
PRINT N'Creating [dbo].[ExecutionCache].[IX_ExecutionCache]...';


GO
CREATE UNIQUE CLUSTERED INDEX [IX_ExecutionCache]
    ON [dbo].[ExecutionCache]([AbsoluteExpiration] DESC, [ReportID] ASC, [SnapshotDataID] ASC);


GO
PRINT N'Creating [dbo].[ExecutionCache].[IX_SnapshotDataID]...';


GO
CREATE NONCLUSTERED INDEX [IX_SnapshotDataID]
    ON [dbo].[ExecutionCache]([SnapshotDataID] ASC);


GO
PRINT N'Creating [dbo].[PersistedStream]...';


GO
CREATE TABLE [dbo].[PersistedStream] (
    [SessionID]      VARCHAR (32)   NOT NULL,
    [Index]          INT            NOT NULL,
    [Content]        IMAGE          NULL,
    [Name]           NVARCHAR (260) NULL,
    [MimeType]       NVARCHAR (260) NULL,
    [Extension]      NVARCHAR (260) NULL,
    [Encoding]       NVARCHAR (260) NULL,
    [Error]          NVARCHAR (512) NULL,
    [RefCount]       INT            NOT NULL,
    [ExpirationDate] DATETIME       NOT NULL,
    CONSTRAINT [PK_PersistedStream] PRIMARY KEY CLUSTERED ([SessionID] ASC, [Index] ASC)
);


GO
PRINT N'Creating [dbo].[Segment]...';


GO
CREATE TABLE [dbo].[Segment] (
    [SegmentId] UNIQUEIDENTIFIER NOT NULL,
    [Content]   VARBINARY (MAX)  NULL,
    CONSTRAINT [PK_Segment] PRIMARY KEY CLUSTERED ([SegmentId] ASC)
);


GO
PRINT N'Creating [dbo].[Segment].[IX_SegmentMetadata]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SegmentMetadata]
    ON [dbo].[Segment]([SegmentId] ASC);


GO
PRINT N'Creating [dbo].[SegmentedChunk]...';


GO
CREATE TABLE [dbo].[SegmentedChunk] (
    [ChunkId]          UNIQUEIDENTIFIER NOT NULL,
    [SnapshotDataId]   UNIQUEIDENTIFIER NOT NULL,
    [ChunkFlags]       TINYINT          NOT NULL,
    [ChunkName]        NVARCHAR (260)   NOT NULL,
    [ChunkType]        INT              NOT NULL,
    [Version]          SMALLINT         NOT NULL,
    [MimeType]         NVARCHAR (260)   NULL,
    [Machine]          NVARCHAR (512)   NOT NULL,
    [SegmentedChunkId] BIGINT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_SegmentedChunk] PRIMARY KEY CLUSTERED ([SegmentedChunkId] ASC)
);


GO
PRINT N'Creating [dbo].[SegmentedChunk].[IX_ChunkId_SnapshotDataId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ChunkId_SnapshotDataId]
    ON [dbo].[SegmentedChunk]([ChunkId] ASC, [SnapshotDataId] ASC);


GO
PRINT N'Creating [dbo].[SegmentedChunk].[UNIQ_SnapshotChunkMapping]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [UNIQ_SnapshotChunkMapping]
    ON [dbo].[SegmentedChunk]([SnapshotDataId] ASC, [ChunkType] ASC, [ChunkName] ASC)
    INCLUDE([ChunkFlags], [ChunkId]);


GO
PRINT N'Creating [dbo].[SessionData]...';


GO
CREATE TABLE [dbo].[SessionData] (
    [SessionID]              VARCHAR (32)     NOT NULL,
    [CompiledDefinition]     UNIQUEIDENTIFIER NULL,
    [SnapshotDataID]         UNIQUEIDENTIFIER NULL,
    [IsPermanentSnapshot]    BIT              NULL,
    [ReportPath]             NVARCHAR (424)   NULL,
    [Timeout]                INT              NOT NULL,
    [AutoRefreshSeconds]     INT              NULL,
    [Expiration]             DATETIME         NOT NULL,
    [ShowHideInfo]           IMAGE            NULL,
    [DataSourceInfo]         IMAGE            NULL,
    [OwnerID]                UNIQUEIDENTIFIER NOT NULL,
    [EffectiveParams]        NTEXT            NULL,
    [CreationTime]           DATETIME         NOT NULL,
    [HasInteractivity]       BIT              NULL,
    [SnapshotExpirationDate] DATETIME         NULL,
    [HistoryDate]            DATETIME         NULL,
    [PageHeight]             FLOAT (53)       NULL,
    [PageWidth]              FLOAT (53)       NULL,
    [TopMargin]              FLOAT (53)       NULL,
    [BottomMargin]           FLOAT (53)       NULL,
    [LeftMargin]             FLOAT (53)       NULL,
    [RightMargin]            FLOAT (53)       NULL,
    [AwaitingFirstExecution] BIT              NULL
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[SessionData]', @OptionName = N'text in row', @OptionValue = N'256';


GO
PRINT N'Creating [dbo].[SessionData].[IDX_SessionData]...';


GO
CREATE UNIQUE CLUSTERED INDEX [IDX_SessionData]
    ON [dbo].[SessionData]([SessionID] ASC);


GO
PRINT N'Creating [dbo].[SessionData].[IX_SessionCleanup]...';


GO
CREATE NONCLUSTERED INDEX [IX_SessionCleanup]
    ON [dbo].[SessionData]([Expiration] ASC);


GO
PRINT N'Creating [dbo].[SessionData].[IX_SessionSnapshotID]...';


GO
CREATE NONCLUSTERED INDEX [IX_SessionSnapshotID]
    ON [dbo].[SessionData]([SnapshotDataID] ASC);


GO
PRINT N'Creating [dbo].[SessionLock]...';


GO
CREATE TABLE [dbo].[SessionLock] (
    [SessionID] VARCHAR (32) NOT NULL
);


GO
PRINT N'Creating [dbo].[SessionLock].[IDX_SessionLock]...';


GO
CREATE UNIQUE CLUSTERED INDEX [IDX_SessionLock]
    ON [dbo].[SessionLock]([SessionID] ASC);


GO
PRINT N'Creating [dbo].[SnapshotData]...';


GO
CREATE TABLE [dbo].[SnapshotData] (
    [SnapshotDataID]    UNIQUEIDENTIFIER NOT NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [ParamsHash]        INT              NULL,
    [QueryParams]       NTEXT            NULL,
    [EffectiveParams]   NTEXT            NULL,
    [Description]       NVARCHAR (512)   NULL,
    [DependsOnUser]     BIT              NULL,
    [PermanentRefcount] INT              NOT NULL,
    [TransientRefcount] INT              NOT NULL,
    [ExpirationDate]    DATETIME         NOT NULL,
    [PageCount]         INT              NULL,
    [HasDocMap]         BIT              NULL,
    [Machine]           NVARCHAR (512)   NOT NULL,
    [PaginationMode]    SMALLINT         NULL,
    [ProcessingFlags]   INT              NULL,
    [IsCached]          BIT              NULL,
    CONSTRAINT [PK_SnapshotData] PRIMARY KEY CLUSTERED ([SnapshotDataID] ASC)
);


GO
EXECUTE sp_tableoption @TableNamePattern = N'[dbo].[SnapshotData]', @OptionName = N'text in row', @OptionValue = N'256';


GO
PRINT N'Creating [dbo].[SnapshotData].[IX_SnapshotCleaning]...';


GO
CREATE NONCLUSTERED INDEX [IX_SnapshotCleaning]
    ON [dbo].[SnapshotData]([PermanentRefcount] ASC, [TransientRefcount] ASC)
    INCLUDE([Machine]);


GO
PRINT N'Creating [dbo].[SnapshotData].[IS_SnapshotExpiration]...';


GO
CREATE NONCLUSTERED INDEX [IS_SnapshotExpiration]
    ON [dbo].[SnapshotData]([PermanentRefcount] ASC, [ExpirationDate] ASC);


GO
PRINT N'Creating [dbo].[DF_Segment_SegmentId]...';


GO
ALTER TABLE [dbo].[Segment]
    ADD CONSTRAINT [DF_Segment_SegmentId] DEFAULT (newsequentialid()) FOR [SegmentId];


GO
PRINT N'Creating [dbo].[DF_SegmentedChunk_ChunkId]...';


GO
ALTER TABLE [dbo].[SegmentedChunk]
    ADD CONSTRAINT [DF_SegmentedChunk_ChunkId] DEFAULT (newsequentialid()) FOR [ChunkId];


GO
PRINT N'Creating unnamed constraint on [dbo].[SnapshotData]...';


GO
ALTER TABLE [dbo].[SnapshotData]
    ADD DEFAULT ((0)) FOR [IsCached];


GO
PRINT N'Creating [dbo].[Positive_ActualByteCount]...';


GO
ALTER TABLE [dbo].[ChunkSegmentMapping] WITH NOCHECK
    ADD CONSTRAINT [Positive_ActualByteCount] CHECK ([ActualByteCount]>=(0));


GO
PRINT N'Creating [dbo].[Positive_LogicalByteCount]...';


GO
ALTER TABLE [dbo].[ChunkSegmentMapping] WITH NOCHECK
    ADD CONSTRAINT [Positive_LogicalByteCount] CHECK ([LogicalByteCount]>=(0));


GO
PRINT N'Creating [dbo].[Positive_StartByte]...';


GO
ALTER TABLE [dbo].[ChunkSegmentMapping] WITH NOCHECK
    ADD CONSTRAINT [Positive_StartByte] CHECK ([StartByte]>=(0));


GO
PRINT N'Creating [dbo].[GetDBVersion]...';


GO

CREATE PROCEDURE [dbo].[GetDBVersion]
@DBVersion nvarchar(32) OUTPUT
AS
set @DBVersion = 'T.0.9.45'
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[ChunkSegmentMapping] WITH CHECK CHECK CONSTRAINT [Positive_ActualByteCount];

ALTER TABLE [dbo].[ChunkSegmentMapping] WITH CHECK CHECK CONSTRAINT [Positive_LogicalByteCount];

ALTER TABLE [dbo].[ChunkSegmentMapping] WITH CHECK CHECK CONSTRAINT [Positive_StartByte];


GO
PRINT N'Update complete.';


GO
